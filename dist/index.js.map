{"version":3,"sources":["../src/services/awsS3.ts","../src/index.ts"],"sourcesContent":["import { type IAgentRuntime, type IAwsS3Service, Service, ServiceType, elizaLogger } from \"@elizaos/core\";\nimport { GetObjectCommand, PutObjectCommand, S3Client } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport * as fs from \"node:fs\";\nimport * as path from \"node:path\";\n\ninterface UploadResult {\n  success: boolean;\n  url?: string;\n  error?: string;\n}\n\ninterface JsonUploadResult extends UploadResult {\n  key?: string; // Add storage key\n}\n\nexport class AwsS3Service extends Service implements IAwsS3Service {\n  static serviceType: ServiceType = ServiceType.AWS_S3;\n\n  private s3Client: S3Client | null = null;\n  private bucket = \"\";\n  private fileUploadPath = \"\";\n  private runtime: IAgentRuntime | null = null;\n\n  async initialize(runtime: IAgentRuntime): Promise<void> {\n    elizaLogger.log(\"Initializing AwsS3Service\");\n    this.runtime = runtime;\n    this.fileUploadPath = runtime.getSetting(\"AWS_S3_UPLOAD_PATH\") ?? \"\";\n  }\n\n  private async initializeS3Client(): Promise<boolean> {\n    if (this.s3Client) return true;\n    if (!this.runtime) return false;\n\n    const AWS_ACCESS_KEY_ID = this.runtime.getSetting(\"AWS_ACCESS_KEY_ID\");\n    const AWS_SECRET_ACCESS_KEY = this.runtime.getSetting(\"AWS_SECRET_ACCESS_KEY\");\n    const AWS_REGION = this.runtime.getSetting(\"AWS_REGION\");\n    const AWS_S3_BUCKET = this.runtime.getSetting(\"AWS_S3_BUCKET\");\n\n    if (!AWS_ACCESS_KEY_ID || !AWS_SECRET_ACCESS_KEY || !AWS_REGION || !AWS_S3_BUCKET) {\n      return false;\n    }\n\n    // Optional fields to allow for other providers\n    const endpoint = this.runtime.getSetting(\"AWS_S3_ENDPOINT\");\n    const sslEnabled = this.runtime.getSetting(\"AWS_S3_SSL_ENABLED\");\n    const forcePathStyle = this.runtime.getSetting(\"AWS_S3_FORCE_PATH_STYLE\");\n\n    this.s3Client = new S3Client({\n      ...(endpoint ? { endpoint } : {}),\n      ...(sslEnabled ? { sslEnabled } : {}),\n      ...(forcePathStyle ? { forcePathStyle: Boolean(forcePathStyle) } : {}),\n      region: AWS_REGION,\n      credentials: {\n        accessKeyId: AWS_ACCESS_KEY_ID,\n        secretAccessKey: AWS_SECRET_ACCESS_KEY,\n      },\n    });\n    this.bucket = AWS_S3_BUCKET;\n    return true;\n  }\n\n  async uploadFile(filePath: string, subDirectory = \"\", useSignedUrl = false, expiresIn = 900): Promise<UploadResult> {\n    try {\n      if (!(await this.initializeS3Client())) {\n        return {\n          success: false,\n          error: \"AWS S3 credentials not configured\",\n        };\n      }\n\n      if (!fs.existsSync(filePath)) {\n        return {\n          success: false,\n          error: \"File does not exist\",\n        };\n      }\n\n      const fileContent = fs.readFileSync(filePath);\n\n      const baseFileName = `${Date.now()}-${path.basename(filePath)}`;\n      // Determine storage path based on public access\n      const fileName = `${this.fileUploadPath}${subDirectory}/${baseFileName}`.replaceAll(\"//\", \"/\");\n      // Set upload parameters\n      const uploadParams = {\n        Bucket: this.bucket,\n        Key: fileName,\n        Body: fileContent,\n        ContentType: this.getContentType(filePath),\n      };\n\n      // Upload file\n      await this.s3Client.send(new PutObjectCommand(uploadParams));\n\n      // Build result object\n      const result: UploadResult = {\n        success: true,\n      };\n\n      // If not using signed URL, return either custom endpoint or public access URL\n      if (!useSignedUrl) {\n        if (this.s3Client.config.endpoint) {\n          const endpoint = await this.s3Client.config.endpoint();\n          const port = endpoint.port ? `:${endpoint.port}` : \"\";\n          result.url = `${endpoint.protocol}//${endpoint.hostname}${port}${endpoint.path}${this.bucket}/${fileName}`;\n        } else {\n          result.url = `https://${this.bucket}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;\n        }\n      } else {\n        const getObjectCommand = new GetObjectCommand({\n          Bucket: this.bucket,\n          Key: fileName,\n        });\n        result.url = await getSignedUrl(this.s3Client, getObjectCommand, {\n          expiresIn, // 15 minutes in seconds\n        });\n      }\n\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error occurred\",\n      };\n    }\n  }\n\n  /**\n   * Generate signed URL for existing file\n   */\n  async generateSignedUrl(fileName: string, expiresIn = 900): Promise<string> {\n    if (!(await this.initializeS3Client())) {\n      throw new Error(\"AWS S3 credentials not configured\");\n    }\n\n    const command = new GetObjectCommand({\n      Bucket: this.bucket,\n      Key: fileName,\n    });\n\n    return await getSignedUrl(this.s3Client, command, { expiresIn });\n  }\n\n  private getContentType(filePath: string): string {\n    const ext = path.extname(filePath).toLowerCase();\n    const contentTypes: { [key: string]: string } = {\n      \".png\": \"image/png\",\n      \".jpg\": \"image/jpeg\",\n      \".jpeg\": \"image/jpeg\",\n      \".gif\": \"image/gif\",\n      \".webp\": \"image/webp\",\n    };\n    return contentTypes[ext] || \"application/octet-stream\";\n  }\n\n  /**\n   * Upload JSON object to S3\n   * @param jsonData JSON data to upload\n   * @param fileName File name (optional, without path)\n   * @param subDirectory Subdirectory (optional)\n   * @param useSignedUrl Whether to use signed URL\n   * @param expiresIn Signed URL expiration time (seconds)\n   */\n  async uploadJson(jsonData: any, fileName?: string, subDirectory?: string, useSignedUrl = false, expiresIn = 900): Promise<JsonUploadResult> {\n    try {\n      if (!(await this.initializeS3Client())) {\n        return {\n          success: false,\n          error: \"AWS S3 credentials not configured\",\n        };\n      }\n\n      // Validate input\n      if (!jsonData) {\n        return {\n          success: false,\n          error: \"JSON data is required\",\n        };\n      }\n\n      // Generate filename (if not provided)\n      const timestamp = Date.now();\n      const actualFileName = fileName || `${timestamp}.json`;\n\n      // Build complete file path\n      let fullPath = this.fileUploadPath || \"\";\n      if (subDirectory) {\n        fullPath = `${fullPath}/${subDirectory}`.replace(/\\/+/g, \"/\");\n      }\n      const key = `${fullPath}/${actualFileName}`.replace(/\\/+/g, \"/\");\n\n      // Convert JSON to string\n      const jsonString = JSON.stringify(jsonData, null, 2);\n\n      // Set upload parameters\n      const uploadParams = {\n        Bucket: this.bucket,\n        Key: key,\n        Body: jsonString,\n        ContentType: \"application/json\",\n      };\n\n      // Upload file\n      await this.s3Client.send(new PutObjectCommand(uploadParams));\n\n      // Build result\n      const result: JsonUploadResult = {\n        success: true,\n        key: key,\n      };\n\n      // If not using signed URL, return either custom endpoint or public access URL\n      if (!useSignedUrl) {\n        if (this.s3Client.config.endpoint) {\n          const endpoint = await this.s3Client.config.endpoint();\n          const port = endpoint.port ? `:${endpoint.port}` : \"\";\n          result.url = `${endpoint.protocol}//${endpoint.hostname}${port}${endpoint.path}${this.bucket}/${key}`;\n        } else {\n          result.url = `https://${this.bucket}.s3.${process.env.AWS_REGION}.amazonaws.com/${key}`;\n        }\n      } else {\n        const getObjectCommand = new GetObjectCommand({\n          Bucket: this.bucket,\n          Key: key,\n        });\n        result.url = await getSignedUrl(this.s3Client, getObjectCommand, { expiresIn });\n      }\n\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error occurred\",\n      };\n    }\n  }\n}\n\nexport default AwsS3Service;\n","import {\n    AwsS3Service,\n} from \"./services/awsS3\"\n\nexport const awsPlugin = {\n    name: \"default\",\n    description: \"Default plugin, with basic actions and evaluators\",\n    services: [\n        new AwsS3Service() as any,\n    ],\n    actions: [],\n};\n\nexport default awsPlugin;"],"mappings":"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","names":[]}