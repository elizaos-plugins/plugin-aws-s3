{"version":3,"sources":["../src/services/awsS3.ts","../src/index.ts"],"sourcesContent":["\nimport { GetObjectCommand, PutObjectCommand, S3Client } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport * as fs from \"node:fs\";\nimport * as path from \"node:path\";\n\ninterface UploadResult {\n    success: boolean;\n    url?: string;\n    error?: string;\n}\n\ninterface JsonUploadResult extends UploadResult {\n    key?: string;\n}\n\nexport class AwsS3Service {\n    static serviceType = \"AWS_S3\";\n\n    private s3Client: S3Client | null = null;\n    private bucket = \"\";\n    private fileUploadPath = \"\";\n    private runtime: any = null;\n\n    async initialize(runtime:any): Promise<void> {\n        this.runtime = runtime;\n        this.fileUploadPath = runtime.getSetting(\"AWS_S3_UPLOAD_PATH\") ?? \"\";\n    }\n\n    private async initializeS3Client(): Promise<boolean> {\n        if (this.s3Client) return true;\n        if (!this.runtime) return false;\n\n        const AWS_ACCESS_KEY_ID = this.runtime.getSetting(\"AWS_ACCESS_KEY_ID\");\n        const AWS_SECRET_ACCESS_KEY = this.runtime.getSetting(\n            \"AWS_SECRET_ACCESS_KEY\",\n        );\n        const AWS_REGION = this.runtime.getSetting(\"AWS_REGION\");\n        const AWS_S3_BUCKET = this.runtime.getSetting(\"AWS_S3_BUCKET\");\n\n        if (\n            !AWS_ACCESS_KEY_ID ||\n            !AWS_SECRET_ACCESS_KEY ||\n            !AWS_REGION ||\n            !AWS_S3_BUCKET\n        ) {\n            return false;\n        }\n\n        const endpoint = this.runtime.getSetting(\"AWS_S3_ENDPOINT\");\n        const sslEnabled = this.runtime.getSetting(\"AWS_S3_SSL_ENABLED\");\n        const forcePathStyle = this.runtime.getSetting(\n            \"AWS_S3_FORCE_PATH_STYLE\",\n        );\n\n        this.s3Client = new S3Client({\n            ...(endpoint ? { endpoint } : {}),\n            ...(sslEnabled ? { sslEnabled } : {}),\n            ...(forcePathStyle\n                ? { forcePathStyle: Boolean(forcePathStyle) }\n                : {}),\n            region: AWS_REGION,\n            credentials: {\n                accessKeyId: AWS_ACCESS_KEY_ID,\n                secretAccessKey: AWS_SECRET_ACCESS_KEY,\n            },\n        });\n        this.bucket = AWS_S3_BUCKET;\n        return true;\n    }\n\n    async uploadFile(\n        filePath: string,\n        subDirectory = \"\",\n        useSignedUrl = false,\n        expiresIn = 900,\n    ): Promise<UploadResult> {\n        try {\n            if (!(await this.initializeS3Client())) {\n                return {\n                    success: false,\n                    error: \"AWS S3 credentials not configured\",\n                };\n            }\n\n            if (!this.s3Client) {\n                return {\n                    success: false,\n                    error: \"S3 client not initialized\",\n                };\n            }\n\n            if (!fs.existsSync(filePath)) {\n                return {\n                    success: false,\n                    error: \"File does not exist\",\n                };\n            }\n\n            const fileContent = fs.readFileSync(filePath);\n            const baseFileName = `${Date.now()}-${path.basename(filePath)}`;\n            \n            // Use split/join instead of replaceAll for better compatibility\n            const fileName = `${this.fileUploadPath}${subDirectory}/${baseFileName}`.split(\"//\").join(\"/\");\n            \n            const uploadParams = {\n                Bucket: this.bucket,\n                Key: fileName,\n                Body: fileContent,\n                ContentType: this.getContentType(filePath),\n            };\n\n            await this.s3Client.send(new PutObjectCommand(uploadParams));\n\n            const result: UploadResult = {\n                success: true,\n            };\n\n            if (!useSignedUrl) {\n                const s3Config = this.s3Client.config;\n                if (s3Config.endpoint) {\n                    const endpoint = await s3Config.endpoint();\n                    const port = endpoint.port ? `:${endpoint.port}` : \"\";\n                    result.url = `${endpoint.protocol}//${endpoint.hostname}${port}${endpoint.path}${this.bucket}/${fileName}`;\n                } else {\n                    result.url = `https://${this.bucket}.s3.${this.runtime?.getSetting(\"AWS_REGION\")}.amazonaws.com/${fileName}`;\n                }\n            } else {\n                const getObjectCommand = new GetObjectCommand({\n                    Bucket: this.bucket,\n                    Key: fileName,\n                });\n                result.url = await getSignedUrl(\n                    this.s3Client,\n                    getObjectCommand,\n                    {\n                        expiresIn,\n                    },\n                );\n            }\n\n            return result;\n        } catch (error) {\n            return {\n                success: false,\n                error:\n                    error instanceof Error\n                        ? error.message\n                        : \"Unknown error occurred\",\n            };\n        }\n    }\n\n    async generateSignedUrl(\n        fileName: string,\n        expiresIn = 900,\n    ): Promise<string> {\n        if (!(await this.initializeS3Client())) {\n            throw new Error(\"AWS S3 credentials not configured\");\n        }\n\n        if (!this.s3Client) {\n            throw new Error(\"S3 client not initialized\");\n        }\n\n        const command = new GetObjectCommand({\n            Bucket: this.bucket,\n            Key: fileName,\n        });\n\n        return await getSignedUrl(this.s3Client, command, { expiresIn });\n    }\n\n    private getContentType(filePath: string): string {\n        const ext = path.extname(filePath).toLowerCase();\n        const contentTypes: { [key: string]: string } = {\n            \".png\": \"image/png\",\n            \".jpg\": \"image/jpeg\",\n            \".jpeg\": \"image/jpeg\",\n            \".gif\": \"image/gif\",\n            \".webp\": \"image/webp\",\n        };\n        return contentTypes[ext] || \"application/octet-stream\";\n    }\n\n    /**\n     * Upload JSON object to S3\n     * @param jsonData JSON data to upload\n     * @param fileName File name (optional, without path)\n     * @param subDirectory Subdirectory (optional)\n     * @param useSignedUrl Whether to use signed URL\n     * @param expiresIn Signed URL expiration time (seconds)\n     */\n    async uploadJson(\n        jsonData: any,\n        fileName?: string,\n        subDirectory?: string,\n        useSignedUrl = false,\n        expiresIn = 900,\n    ): Promise<JsonUploadResult> {\n        try {\n            if (!(await this.initializeS3Client())) {\n                return {\n                    success: false,\n                    error: \"AWS S3 credentials not configured\",\n                };\n            }\n\n            if (!this.s3Client) {\n                return {\n                    success: false,\n                    error: \"S3 client not initialized\",\n                };\n            }\n\n            if (!jsonData) {\n                return {\n                    success: false,\n                    error: \"JSON data is required\",\n                };\n            }\n\n            const timestamp = Date.now();\n            const actualFileName = fileName || `${timestamp}.json`;\n\n            let fullPath = this.fileUploadPath || \"\";\n            if (subDirectory) {\n                fullPath = `${fullPath}/${subDirectory}`.split(/\\/+/).join(\"/\");\n            }\n            const key = `${fullPath}/${actualFileName}`.split(/\\/+/).join(\"/\");\n\n            const jsonString = JSON.stringify(jsonData, null, 2);\n\n            const uploadParams = {\n                Bucket: this.bucket,\n                Key: key,\n                Body: jsonString,\n                ContentType: \"application/json\",\n            };\n\n            await this.s3Client.send(new PutObjectCommand(uploadParams));\n\n            const result: JsonUploadResult = {\n                success: true,\n                key: key,\n            };\n\n            if (!useSignedUrl) {\n                const s3Config = this.s3Client.config;\n                if (s3Config.endpoint) {\n                    const endpoint = await s3Config.endpoint();\n                    const port = endpoint.port ? `:${endpoint.port}` : \"\";\n                    result.url = `${endpoint.protocol}//${endpoint.hostname}${port}${endpoint.path}${this.bucket}/${key}`;\n                } else {\n                    result.url = `https://${this.bucket}.s3.${this.runtime?.getSetting(\"AWS_REGION\")}.amazonaws.com/${key}`;\n                }\n            } else {\n                const getObjectCommand = new GetObjectCommand({\n                    Bucket: this.bucket,\n                    Key: key,\n                });\n                result.url = await getSignedUrl(\n                    this.s3Client,\n                    getObjectCommand,\n                    { expiresIn },\n                );\n            }\n\n            return result;\n        } catch (error) {\n            return {\n                success: false,\n                error:\n                    error instanceof Error\n                        ? error.message\n                        : \"Unknown error occurred\",\n            };\n        }\n    }\n}\n\nexport default AwsS3Service;\n","import {\n    AwsS3Service,\n} from \"./services/awsS3\"\n\nexport const awsPlugin = {\n    name: \"default\",\n    description: \"Default plugin, with basic actions and evaluators\",\n    services: [\n        new AwsS3Service(),\n    ],\n    actions: [],\n};\n\nexport default awsPlugin;"],"mappings":"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","names":[]}